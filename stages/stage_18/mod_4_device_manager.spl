alias functionNum R1;
alias currentPID R2;

//disk load
if (functionNum == 2) then
    // acquire disk
    // print("in diskload");
    R1 = 3;
    multipush(R2,R3,R4);
    call MOD_0;
    multipop(R2,R3,R4);
    // print("back to device man");
    [DISK_STATUS_TABLE] = 1;
    [DISK_STATUS_TABLE+1]=0;
    [DISK_STATUS_TABLE+2]=R3;
    [DISK_STATUS_TABLE+3]=R4;
    load(R3,R4);
    [PROCESS_TABLE + R2*16 + 4] = WAIT_DISK;
    // print("call scheduler");
    call SCHEDULER;
    // print("back");
    return;
endif;

// terminal write
if (functionNum==3) 
then
    // breakpoint;
    multipush(R1,R2,R3);
    R1 = 8;
    R2 = [SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R1,R2,R3);
    print(R3);

    multipush(R1,R2,R3);
    R1 = 9;
    R2 = [SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R1,R2,R3);
    return;
endif;

//terminal read
if (functionNum ==4)
then
    // breakpoint;
    multipush(R1,R2,R3);
    R1 = 8;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop(R1,R2,R3);
    read;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 4] = WAIT_TERMINAL;
    multipush(R1,R2,R3);
    call SCHEDULER;
    multipop(R1,R2,R3);
    // breakpoint;
    alias wordaddr R4;
    wordaddr = [PTBR + 2*(R3/512)]*512 + R3%512;
    [wordaddr] = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 8];
    return;
endif;