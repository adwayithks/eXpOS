alias functionNum R1;
alias currentPID R2;

//disk
if (functionNum == 3) then
    while([DISK_STATUS_TABLE]==1) do
        [PROCESS_TABLE + R2*16 +4] = WAIT_DISK;
        call SCHEDULER;
    endwhile;
    // print("disk free");
    [DISK_STATUS_TABLE] = 1;
    [DISK_STATUS_TABLE + 1]=R2;
    return;
endif;

// acquire terminal
if (functionNum == 8)
then
    if ([TERMINAL_STATUS_TABLE]==1)
    then
        [PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;
        multipush(R1,R2);
        call SCHEDULER;
        multipop(R1,R2);
    endif;

    [TERMINAL_STATUS_TABLE] = 1;
    [TERMINAL_STATUS_TABLE + 1] = currentPID;
    // breakpoint;
    return;
endif;

//release terminal
if (functionNum == 9)
then
    if(currentPID != [TERMINAL_STATUS_TABLE + 1])
    then
        R0 = -1;
        return;
    endif;

    [TERMINAL_STATUS_TABLE] = 0;

    alias i R4;
    i = 0;
    while(i < 16) do
        if( [PROCESS_TABLE + i*16 + 4] == WAIT_TERMINAL ) 
        then
            [PROCESS_TABLE + i*16 + 4] = READY;
        endif;
	    i = i+1;
    endwhile;
    R0 = 0;
    // breakpoint;
    return;
endif;