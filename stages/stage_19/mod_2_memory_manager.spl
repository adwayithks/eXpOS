// get free page
if (R1==1) then
    // print("get free page");
    [SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3]+1;
    while ([SYSTEM_STATUS_TABLE+2]==0) do 
        [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16 + 4] = WAIT_MEM;
        // print("WAIT_MEM");
        // R1 =0;
        // while(R1<128) do
        //     print([MEMORY_FREE_LIST+R1]);
        //     R1 = R1+1;
        // endwhile;
        call SCHEDULER;
        // print("wait over");
    endwhile;
    [SYSTEM_STATUS_TABLE+3] = [SYSTEM_STATUS_TABLE+3]-1;
    [SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]-1;
    alias i R0;
    i=76;
    while(i<128) do
        if ([MEMORY_FREE_LIST+i] == 0) then
            [MEMORY_FREE_LIST +i] = 1;
            break;
        endif;
        i=i+1;
    endwhile;
    if(i==128) then
        print([SYSTEM_STATUS_TABLE+3]);
        breakpoint;
    endif;
    // print("mod_2");
    // print(R0);
    breakpoint;
    return;
endif;

// release page
if (R1==2) then
    // print("release page");
    // print(R2);
    [MEMORY_FREE_LIST + R2] = [MEMORY_FREE_LIST + R2]-1;
    
    if([MEMORY_FREE_LIST + R2] == 0) then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE+2]+1;
        alias i R3;
        i=0;
        while(i<16) do
            if([PROCESS_TABLE + i*16 +4] == WAIT_MEM) then
                [PROCESS_TABLE + i*16 +4] = READY;
            endif;
            i = i+1;
        endwhile;
    endif;

    
    // breakpoint;
    return;
endif;

//release block
if(R1 == 4) then
    [DISK_FREE_LIST + R2] = [DISK_FREE_LIST+R2]-1;
    return;
endif;

//get code page
if(R1==5) then
    // print("mod_2");
    alias i R5;
    alias j R6;
    i=0;
    j=0;
    while(i<16) do
        j=4;
        while(j<8) do
            if([DISK_MAP_TABLE+i*10+j] == R2 ) then
                if([PAGE_TABLE_BASE + i*20 + 2*j+1] == "0100" || [PAGE_TABLE_BASE + i*20 + 2*j+1] == "1100") then
                    // print(i);
                    // print(j);
                    // print([PAGE_TABLE_BASE + i*20 + 2*j]);
                    breakpoint;
                    R0 = [PAGE_TABLE_BASE + i*20 + 2*j];
                    // print("page already there");
                    [MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
                    return;
                endif;
            endif;
            j=j+1;
        endwhile;
        i=i+1;
    endwhile;
    breakpoint;
    // print("pg not present");
    R1 = 1;
    call MOD_2;
    // print("get code page");
    multipush(R0);
    //calling disk manager to load page
    R1 = 2;
    R4 = R2;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = R0;
    call MOD_4;
    multipop(R0);
    // print("gt code");
    // print(R0);
    return;
endif;