breakpoint;
// print("exception");
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = -1;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 - 1;

backup;
multipush(EIP);
if (EC!=0) then
    print("not page fault");
    print("exiting process");
    breakpoint;
    R1 =3;
    R2 = [SYSTEM_STATUS_TABLE+1];
    call MOD_1;
    // print("call sch");
    call SCHEDULER;
// else
    // print("page fault");
    // print(EPN);
endif;
breakpoint;
if (EPN >3) then
    R1 = 5;
    R2 = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE+1]*10 + EPN];
    // print(R2);
    call MOD_2;
    // print(R0);
    [PTBR + 2*EPN] = R0;
    [PTBR + 2*EPN +1]  = "1100";
    // print("set ptbr");
    // print([SYSTEM_STATUS_TABLE+1]*16 + 2*EPN);
    // print([PTBR + [SYSTEM_STATUS_TABLE+1]*16 + 2*EPN]);
    // print(R0);
    breakpoint;
endif;
if(EPN < 4) then
    R1 = 1;
    call MOD_2;
    [PTBR + 4] = R0;
    [PTBR + 5] = "1110";
    R1 = 1;
    call MOD_2;
    [PTBR + 6] = R0;
    [PTBR + 7] = "1110";
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9 ] = 0;
multipop(EIP);
restore;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13];
SP = SP+1;
[[PTBR + 2*(SP /512)]*512 + SP%512] = EIP;
// print("ex return"); 
breakpoint;

ireturn;