alias functionNum R1;
alias currentPID R2;

//disk
if (functionNum == 3) then
    while([DISK_STATUS_TABLE]==1) do
        [PROCESS_TABLE + R2*16 +4] = WAIT_DISK;
        call SCHEDULER;
    endwhile;
    // print("disk free");
    [DISK_STATUS_TABLE] = 1;
    [DISK_STATUS_TABLE + 1]=R2;
    return;
endif;

// acquire terminal
if (functionNum == 8)
then
    if ([TERMINAL_STATUS_TABLE]==1)
    then
        [PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;
        multipush(R1,R2);
        call SCHEDULER;
        multipop(R1,R2);
    endif;

    [TERMINAL_STATUS_TABLE] = 1;
    [TERMINAL_STATUS_TABLE + 1] = currentPID;
    // breakpoint;
    return;
endif;

//release terminal
if (functionNum == 9)
then
    if(currentPID != [TERMINAL_STATUS_TABLE + 1])
    then
        R0 = -1;
        return;
    endif;

    [TERMINAL_STATUS_TABLE] = 0;

    alias i R4;
    i = 0;
    while(i < 16) do
        if( [PROCESS_TABLE + i*16 + 4] == WAIT_TERMINAL ) 
        then
            [PROCESS_TABLE + i*16 + 4] = READY;
        endif;
	    i = i+1;
    endwhile;
    R0 = 0;
    // breakpoint;
    return;
endif;

//acquire semaphore
if(functionNum == 6) then
    // print("in mod0");
    alias i R0;
    i=0;
    while(i<32) do
        if([SEMAPHORE_TABLE + 4*i +1] == 0) then
            [SEMAPHORE_TABLE + 4*i+1] = 1;
            break;
        endif;
        i = i+1;
    endwhile;
    if(i==32) then
        R0 = -1;
        return;
    endif;
    return;
endif;

//release semaphore
if(functionNum == 7) then
    print("release semaphore");
    alias semDesc R2;
    alias currentPID R3;
    alias perProcessTable R4;
    perProcessTable = [PROCESS_TABLE + currentPID*16 + 11]*512 + 496;

//changing semdesc from process table index to semaphore table index
    semDesc = [perProcessTable + 2*semDesc + 1];

    if(currentPID == [SEMAPHORE_TABLE + 4*semDesc]) then
        [SEMAPHORE_TABLE + 4*semDesc] = -1;
        
        alias i R4;
        i = 0;
        while(i<16) do
            alias process R5;
            process = PROCESS_TABLE + i*16;
            if([process + 4] == WAIT_SEMAPHORE && [process + 5] == semDesc) then
                [process + 4] = READY;
            endif;
            i=i+1;
        endwhile;
    endif;

    
    [SEMAPHORE_TABLE + 4*semDesc + 1] = [SEMAPHORE_TABLE + 4*semDesc + 1] - 1;
        return

endif;