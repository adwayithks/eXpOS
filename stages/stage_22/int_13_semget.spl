alias funcnum R1;
funcnum = [ [PTBR + 2*((SP-5)/512)]*512 + (SP-5)%512 ];
// print("in semget");
// print(funcnum); //check
// print([ [PTBR + 2*((SP)/512)]*512 + (SP)%512 ]);

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP; //SAVING USER SP

if (funcnum == 17) then //semget
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE]*16 + 9] = 17; //setting mode flag
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 12]; //SWITCHING TO KERNEL STACK

    alias counter R2;
    counter = 0;
    alias perProcessTable R3;
    perProcessTable = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 + 496;
    //finding free entry in per process resource table
    while(counter<8) do
        if([perProcessTable + 2*counter] == -1) then
            //setting resource identifier to 1
            [perProcessTable + 2*counter] = 1;
            break;
        endif;
        counter = counter+1;
    endwhile;
    if(counter == 8) then
        SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
        [ [PTBR + 2*((SP-1)/512)]*512 + (SP-1)%512 ] = -1;
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE]*16 + 9] = 0; //setting mode flag
        // print("perprocesss fail");
        ireturn;
    endif;

    // calling acquire semaphore in resource manager module
    multipush(R1,R2,R3);
    R1 = 6;
    R2 = [SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R1,R2,R3);
    if (R0 == -1) then
        SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
        [ [PTBR + 2*((SP-1)/512)]*512 + (SP-1)%512 ] = -2;
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0; //setting mode flag
        // print("module fail");
        ireturn;
    endif;

    [perProcessTable + 2*counter + 1] = R0; //storing the index of semaphore table
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE]*16 + 9] = 0; //setting mode flag
    [ [PTBR + 2*((SP-1)/512)]*512 + (SP-1)%512 ] = counter;
    // print("sem success");
    // print([ [PTBR + 2*((SP)/512)]*512 + (SP)%512 ]);
    ireturn;
endif;

//sem release
if(funcnum == 18) then
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE]*16 + 9] = 18; //setting mode flag
    alias semDesc R1;
    semDesc = [ [PTBR + 2*(SP-4)/512]*512 + (SP - 4)%512 ];
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512-1; //SWITCHING TO KERNEL STACK
    alias perProcessTable R3;
    perProcessTable = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 + 496;

    if(semDesc <0 || semDesc>7 || [perProcessTable + 2*semDesc] != 1 ) then
        SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
        [ [PTBR + 2*((SP-1)/512)]*512 + (SP-1)%512 ] = -2;
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE]*16 + 9] = 0; //setting mode flag
        // print("module fail");
        // print(semDesc);
        ireturn;
    endif;
    
    //invoke release semaphore
    multipush(R1,R2,R3);
    R2 = R1;
    R1 = 7;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop(R1,R2,R3);
    
    //INVALIDATE PROCESS TABLE ENTRY
    [perProcessTable + 2*semDesc] = -1;
    
    SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13];
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
    [ [PTBR + 2*((SP-1)/512)]*512 + (SP-1)%512 ] = 0;
    // print([ [PTBR + 2*((SP)/512)]*512 + (SP)%512 ]);
    ireturn;
endif;