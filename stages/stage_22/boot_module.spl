//STAGE 22
// INT 13
loadi(28,41);
loadi(29,42);

//int 14
loadi(30,43);
loadi(31,44);

//stage 21
//int 11
loadi(24,37);
loadi(25,38);

//int 15
loadi(32,45);
loadi(33,46);

//STAGE 20
//INT 8
loadi(18,31);
loadi(19,32);
// stage 19
loadi(61,2);
// stage 18 start
    // load disk interrupt routine
    loadi(6,19);
    loadi(7,20);
    [DISK_STATUS_TABLE] = 0;

   
// stage 18 end
// stage 17 start
    // load intr 9
    loadi(20,33);
    loadi(21,34);

    // load module 1
    loadi(42,55);
    loadi(43,56);

    // load module 2
    loadi(44,57);
    loadi(45,58);
// stage 17 pause

// load inode table
loadi(59,3);
loadi(60,4);

// load intr 6
loadi(14,27);
loadi(15,28);

//  load console interrupt
loadi(8,21);
loadi(9,22);

// load module 0
loadi(40,53);
loadi(41,54);

//load module 4
loadi(48,61);
loadi(49,62);

// load scheduler
loadi(50,63);
loadi(51,64);

// timer int

loadi(4, 17);
loadi(5, 18);

//load library

loadi(63,13);
loadi(64,14);

// init

loadi(65,7);
loadi(66,8);


// int 10

loadi(22,35);
loadi(23,36);

// exhandler

loadi(2, 15);
loadi(3, 16);


// int 7

loadi(16,29);
loadi(17,30);

//init program
//library
PTBR = PAGE_TABLE_BASE + 20;
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//heap

[PTBR+4] = 76;
[PTBR+5] = "0110";
[PTBR+6] = 77;
[PTBR+7] = "0110";


//code

[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack

[PTBR+16] = 78;
[PTBR+17] = "0110";
[PTBR+18] = 79;
[PTBR+19] = "0110";

[78*512] = [65*512+1];

[DISK_MAP_TABLE + 2] = 76;
[DISK_MAP_TABLE + 3] = 77;
[DISK_MAP_TABLE + 4] = 65;
[DISK_MAP_TABLE + 5] = 66;
[DISK_MAP_TABLE + 6] = -1;
[DISK_MAP_TABLE + 7] = -1;
[DISK_MAP_TABLE + 8] = 78;
[DISK_MAP_TABLE + 9] = 79;

// init entry in process table
[PROCESS_TABLE + 17] = 1;
[PROCESS_TABLE + 20] = CREATED;
[PROCESS_TABLE + 27] = 80;
[PROCESS_TABLE + 29] = 8*512;
[PROCESS_TABLE + 28] = 0;
[PROCESS_TABLE + 30] = PAGE_TABLE_BASE+20;
[PROCESS_TABLE + 31] = 10;

 //setting the preprocess table
        alias j R0;
        j = 496;
        while(j<512) do
            [[PROCESS_TABLE + 1*16 +11]*512 +j] = -1;
            j=j+1;
            [[PROCESS_TABLE + 1*16 +11]*512 +j] = 0;
            j = j+1;
        endwhile;

//setting all other process as terminated
[PROCESS_TABLE + 68] = TERMINATED;
[PROCESS_TABLE + 84] = TERMINATED;
[PROCESS_TABLE + 100] = TERMINATED;
[PROCESS_TABLE + 116] = TERMINATED;
[PROCESS_TABLE + 132] = TERMINATED;
[PROCESS_TABLE + 148] = TERMINATED;
[PROCESS_TABLE + 164] = TERMINATED;
[PROCESS_TABLE + 180] = TERMINATED;
[PROCESS_TABLE + 196] = TERMINATED;
[PROCESS_TABLE + 212] = TERMINATED;
[PROCESS_TABLE + 228] = TERMINATED;
[PROCESS_TABLE + 244] = TERMINATED;
[PROCESS_TABLE + 52] = TERMINATED;
[PROCESS_TABLE + 36] = TERMINATED;

//setting terminal status table as zero
[TERMINAL_STATUS_TABLE] = 0;

// stage 17 resume
    alias i R0;
    i=0;
    while(i<83) do
        [MEMORY_FREE_LIST+i] = 1;
        i = i+1;
    endwhile;
    while(i<128) do
        [MEMORY_FREE_LIST+i] = 0;
        i = i+1;
    endwhile;
    [SYSTEM_STATUS_TABLE + 2] = 45;
    [SYSTEM_STATUS_TABLE + 3] = 0;
//stage 17 over

//initialising semaphore table
i = 0;
while(i<32) do
    [SEMAPHORE_TABLE + 4*i]  = -1;
    [SEMAPHORE_TABLE + 4*i + 1] = 0;
    i = i+1;
endwhile;

return;
